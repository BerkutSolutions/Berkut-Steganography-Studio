const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electronAPI', {
  createHash: (algorithm, data, encoding) => ipcRenderer.invoke('createHash', algorithm, data, encoding),
  encryptText: (text, key) => ipcRenderer.invoke('encrypt-text', text, key),
  generateKey: () => ipcRenderer.invoke('generate-key'),
  processDocx: (inputPath, secretData) => ipcRenderer.invoke('process-docx', inputPath, secretData),
  processPdf: (inputPath, secretData) => ipcRenderer.invoke('process-pdf', inputPath, secretData),
  processImage: (inputPath, secretData, fileType, fillPercentage) => ipcRenderer.invoke('process-image', inputPath, secretData, fileType, fillPercentage),
  processAudio: (inputPath, outputPath, secretData) => ipcRenderer.invoke('process-audio', inputPath, outputPath, secretData),
  processVideo: (inputPath, outputPath, secretData) => ipcRenderer.invoke('process-video', inputPath, outputPath, secretData),
  showSaveDialog: (options) => ipcRenderer.invoke('show-save-dialog', options),
  saveFile: (options) => ipcRenderer.invoke('saveFile', options),
  extractDataFromDocx: (filePath) => ipcRenderer.invoke('extract-data-from-docx', filePath),
  extractDataFromPdf: (filePath) => ipcRenderer.invoke('extract-data-from-pdf', filePath),
  extractDataFromAudio: (filePath) => ipcRenderer.invoke('extract-data-from-audio', filePath),
  extractDataFromVideo: (filePath) => ipcRenderer.invoke('extract-data-from-video', filePath),
  readImageMetadata: (filePath) => ipcRenderer.invoke('readImageMetadata', filePath),
  readVideoMetadata: (filePath) => ipcRenderer.invoke('readVideoMetadata', filePath),
  removeImageMetadata: (filePath) => ipcRenderer.invoke('removeImageMetadata', filePath),
  removeVideoMetadata: (filePath) => ipcRenderer.invoke('removeVideoMetadata', filePath),
  minimizeWindow: () => ipcRenderer.invoke('minimize-window'),
  maximizeWindow: () => ipcRenderer.invoke('maximize-window'),
  closeWindow: () => ipcRenderer.invoke('close-window'),
  onWindowMaximized: (callback) => ipcRenderer.on('window-maximized', callback),
  onWindowUnmaximized: (callback) => ipcRenderer.on('window-unmaximized', callback),
  onWindowRestored: (callback) => ipcRenderer.on('window-restored', callback),
  getSettings: () => ipcRenderer.invoke('get-settings'),
  saveSettings: (settings) => ipcRenderer.invoke('save-settings', settings),
  checkForUpdates: () => ipcRenderer.invoke('check-for-updates'),
  onShowUpdatePrompt: (callback) => ipcRenderer.on('show-update-prompt', callback),
  onUpdateAvailable: (callback) => ipcRenderer.on('update-available', callback),
  setInitialUpdateSetting: (value) => ipcRenderer.send('set-initial-update-setting', value),
  openExternalLink: (url) => ipcRenderer.send('open-external-link', url),
});